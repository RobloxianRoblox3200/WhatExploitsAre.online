using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace CheatUpToDateChecker
{
    public partial class MainPage : ContentPage
    {
        static class ste_colors
        {
            public static readonly Color UpToDate      = Color.FromHex("#3f9e72");
            public static readonly Color DownToDate    = Color.FromHex("#b53f3f");
            public static readonly Color InProgress    = Color.FromHex("#345282");
        }
        public static string DownloadString(string Url)
        {
            string Content = string.Empty;
            using (WebClient wc = new WebClient())
            {
                Content = wc.DownloadString("http://api.whatexploitsare.online/status");
            }
            return Content;
        }
        public MainPage()
        {
            InitializeComponent();

            /* Roblox Version */
            //RbxVersion.Text = DownloadString("http://setup.roblox.com/version");
            /* Begin API calls */
            string UnparsedJson = string.Empty;
            try
            {
                using (WebClient wc = new WebClient())
                {
                    UnparsedJson = wc.DownloadString("http://api.whatexploitsare.online/status");
                }
            }
            catch (Exception)
            {
                DisplayAlert("Oops!", "Something didn't go as expected, couldn't fetch latest information.", "Ok");
            }
            /* Did we fetch the latest information? */
            if (UnparsedJson != null && UnparsedJson != string.Empty)
            {
                /* Thanks to JSON in C# for being dumb */
                dynamic ParsedJson = JsonConvert.DeserializeObject<dynamic>(UnparsedJson);
                int Len = ParsedJson.Count;
                for (int i = 0; i < Len; i++)
                {
                    dynamic ExploitRoom = ParsedJson[i];
                    string ExJson = ExploitRoom.ToString();
                    Dictionary<string, dynamic> NewClass = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(ExJson);
                    string ExploitName = NewClass.First().Key;
                    dynamic Exploit = ExploitRoom[ExploitName];
                    switch (ExploitName)
                    {
                        case "Synapse":
                            SYN_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            SYN_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            SYN_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "Script-Ware":
                            SWR_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            SWR_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            SWR_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "KRNL":
                            KRL_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            KRL_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            KRL_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "Temple":
                            TPL_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            TPL_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            TPL_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "Electron":
                            ELC_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            ELC_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            ELC_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "Atlas":
                            ATL_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            ATL_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            ATL_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "DX9WARE":
                            DX9_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            DX9_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            DX9_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                        case "Westeria":
                            WST_STT.Text = Exploit["updated"] == true ? "Up-to-date" : "Outdated";
                            WST_STT.TextColor = Exploit["updated"] == true ? ste_colors.UpToDate : ste_colors.DownToDate;
                            WST_DTE.Text = String.Format("Last Update: {0}", Exploit["last_update"]);
                            break;
                    }
                    //ARC_STT.TextColor = ste_colors.DownToDate;
                    //SNW_STT.TextColor = ste_colors.InProgress;
                }
            }
        }
    }
}
